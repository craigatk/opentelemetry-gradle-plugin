buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id "java-gradle-plugin"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "1.9.24" // https://docs.gradle.org/current/userguide/compatibility.html#kotlin
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.24"
    id "org.jlleitschuh.gradle.ktlint" version "12.1.1"
    id "dev.projektor.publish" version "9.0.0"
    id "com.gradle.plugin-publish" version "1.2.1"
    id "com.atkinsondev.opentelemetry-build" version "1.14.0"
}

group = "com.atkinsondev"
version = "2.0.0"

gradlePlugin {
    website = 'https://github.com/craigatk/opentelemetry-gradle-plugin'
    vcsUrl = 'https://github.com/craigatk/opentelemetry-gradle-plugin'
    plugins {
        opentelemetryPlugin {
            id = 'com.atkinsondev.opentelemetry-build'
            implementationClass = 'com.atkinsondev.opentelemetry.build.OpenTelemetryBuildPlugin'
            displayName = 'OpenTelemetry build plugin'
            description = 'Instrument your Gradle build with OpenTelemetry observability to find and eliminate build bottlenecks'
            tags.addAll(['observability', 'opentelemetry', 'telemetry'])
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.opentelemetry:opentelemetry-api:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-sdk:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-exporter-zipkin:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-semconv:$otelSemConvVersion"

    testImplementation gradleTestKit()

    testImplementation(platform("org.junit:junit-bom:5.10.2"))
    testImplementation "org.junit.jupiter:junit-jupiter"

    testImplementation "org.wiremock:wiremock:3.9.1"
    testImplementation "io.strikt:strikt-core:0.35.1"
    testImplementation "org.awaitility:awaitility-kotlin:4.2.2"
    testImplementation "io.mockk:mockk:1.13.13"
    testImplementation "org.testcontainers:testcontainers:1.19.8"
    testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
    testImplementation "com.squareup.okhttp3:okhttp:4.12.0"
}

test {
    useJUnitPlatform()

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

projektor {
    serverUrl = "https://projektorlive.herokuapp.com"
    publishToken = System.getenv("PROJEKTOR_TOKEN") ?: project.findProperty('projektor_publish_token') ?: null
}

openTelemetryBuild {
    endpoint = System.getenv("OTEL_BUILD_ENDPOINT") ?: project.findProperty('otel_build_endpoint') ?: "https://api.honeycomb.io"
    headers = [
            "x-honeycomb-team": System.getenv("HONEYCOMB_API_KEY") ?: project.findProperty('honeycomb_api_key') ?: "",
            "x-honeycomb-dataset": "otel-gradle"
    ]
    traceViewUrl = "https://ui.honeycomb.io/otel-gradle/environments/dev/datasets/gradle-builds/trace?trace_id={traceId}"
}
